//
// File generated by d:\extlib\ROOT\3.00.06\bin\rootcint at Tue Aug 21 17:35:16 2001.
// Do NOT change. Changes will be lost next time file is generated
//
#include "mcRootDataCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

//______________________________________________________________________________
TBuffer &operator>>(TBuffer &buf, RMcParticle *&obj)
{
   // Read a pointer to an object of class RMcParticle.

   obj = (RMcParticle *) buf.ReadObject(RMcParticle::Class());
   return buf;
}

//______________________________________________________________________________
TBuffer &operator>>(TBuffer &buf, RMcVertex *&obj)
{
   // Read a pointer to an object of class RMcVertex.

   obj = (RMcVertex *) buf.ReadObject(RMcVertex::Class());
   return buf;
}

//______________________________________________________________________________
TBuffer &operator>>(TBuffer &buf, RMcEvent *&obj)
{
   // Read a pointer to an object of class RMcEvent.

   obj = (RMcEvent *) buf.ReadObject(RMcEvent::Class());
   return buf;
}

//______________________________________________________________________________
void RMcVertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class RMcVertex.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_pMomI;
      R__b >> m_pMomF;
      R__b >> m_pPosI;
      R__b >> m_pPosF;
      R__b >> m_timeOfFlight;
      R__b >> m_mcDaughterParticles;
      R__b >> m_motherParticle;
      R__b >> m_mainParticle;
      R__b.CheckByteCount(R__s, R__c, RMcVertex::IsA());
   } else {
      R__c = R__b.WriteVersion(RMcVertex::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_pMomI;
      R__b << m_pMomF;
      R__b << m_pPosI;
      R__b << m_pPosF;
      R__b << m_timeOfFlight;
      R__b << m_mcDaughterParticles;
      R__b << m_motherParticle;
      R__b << m_mainParticle;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RMcVertex::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class RMcVertex.

   TClass *R__cl  = RMcVertex::IsA();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "*m_pMomI", &m_pMomI);
   R__insp.Inspect(R__cl, R__parent, "*m_pMomF", &m_pMomF);
   R__insp.Inspect(R__cl, R__parent, "*m_pPosI", &m_pPosI);
   R__insp.Inspect(R__cl, R__parent, "*m_pPosF", &m_pPosF);
   R__insp.Inspect(R__cl, R__parent, "m_timeOfFlight", &m_timeOfFlight);
   R__insp.Inspect(R__cl, R__parent, "*m_mcDaughterParticles", &m_mcDaughterParticles);
   R__insp.Inspect(R__cl, R__parent, "*m_motherParticle", &m_motherParticle);
   R__insp.Inspect(R__cl, R__parent, "*m_mainParticle", &m_mainParticle);
   TObject::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
const char *RMcVertex::Class_Name()
{
   // Return the class name for RMcVertex.
   return "RMcVertex";
}

// Static variable to hold initialization object
static RMcVertex::R__Init __gR__InitRMcVertex(0);

//______________________________________________________________________________
void RMcParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class RMcParticle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nPDGId;
      R__b >> m_mcVertex;
      R__b.CheckByteCount(R__s, R__c, RMcParticle::IsA());
   } else {
      R__c = R__b.WriteVersion(RMcParticle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nPDGId;
      R__b << m_mcVertex;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RMcParticle::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class RMcParticle.

   TClass *R__cl  = RMcParticle::IsA();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "m_nPDGId", &m_nPDGId);
   R__insp.Inspect(R__cl, R__parent, "*m_mcVertex", &m_mcVertex);
   TObject::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
const char *RMcParticle::Class_Name()
{
   // Return the class name for RMcParticle.
   return "RMcParticle";
}

// Static variable to hold initialization object
static RMcParticle::R__Init __gR__InitRMcParticle(0);

//______________________________________________________________________________
void RMcEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class RMcEvent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nEvent;
      R__b >> m_nRun;
      R__b >> m_pVertList;
      R__b >> m_nVertCount;
      R__b.CheckByteCount(R__s, R__c, RMcEvent::IsA());
   } else {
      R__c = R__b.WriteVersion(RMcEvent::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nEvent;
      R__b << m_nRun;
      R__b << m_pVertList;
      R__b << m_nVertCount;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RMcEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class RMcEvent.

   TClass *R__cl  = RMcEvent::IsA();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "m_nEvent", &m_nEvent);
   R__insp.Inspect(R__cl, R__parent, "m_nRun", &m_nRun);
   R__insp.Inspect(R__cl, R__parent, "*m_pVertList", &m_pVertList);
   R__insp.Inspect(R__cl, R__parent, "m_nVertCount", &m_nVertCount);
   TObject::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
const char *RMcEvent::Class_Name()
{
   // Return the class name for RMcEvent.
   return "RMcEvent";
}

// Static variable to hold initialization object
static RMcEvent::R__Init __gR__InitRMcEvent(0);

